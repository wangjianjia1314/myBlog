(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{309:function(t,a,s){"use strict";s.r(a);var e=s(13),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"vue3-对比-vue2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue3-对比-vue2"}},[t._v("#")]),t._v(" vue3 对比 vue2")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("组合式 api 可以将同一个逻辑关注点代码收集到一起 方便维护")])]),t._v(" "),a("li",[a("p",[t._v("选项式 api 只能根据提供对应的选项，编写指定的内容，不利于维护。")])]),t._v(" "),a("li",[a("p",[t._v("setUp 取代了 create beforeCreate，可以在 setUp 中做这两个钩子的事情 在 setUp 中 this 获取不到组件实力 因为在执行时机 组件实例还未被创建。")])]),t._v(" "),a("li",[a("p",[t._v("响应式 api 的修改")]),t._v(" "),a("ul",[a("li",[t._v("在 vue2 中，数据劫持是通过 Object.defineProperty")]),t._v(" "),a("li",[t._v("这个 API 有一些缺陷，并不能检测对象属性的添加和删除")]),t._v(" "),a("li",[t._v("vue3 是通过 proxy 监听整个对象，那么对于删除还是监听当然也能监听到")])])]),t._v(" "),a("li",[a("p",[t._v("逻辑复用")]),t._v(" "),a("ul",[a("li",[t._v("在 vue2 中，我们是通过 mixin 实现功能混合，如果多个 mixin 混合，会存在两个非常明显的问题：命名冲突和数据来源不清晰")]),t._v(" "),a("li",[t._v("vue3 而通过 composition 这种形式，可以将一些复用的代码抽离出来作为一个函数，只要的使用的地方直接进行调用即可")])])]),t._v(" "),a("li",[a("p",[t._v("更小")]),t._v(" "),a("ul",[a("li",[t._v("api 的移除\n"),a("ul",[a("li",[t._v("1.vue3 移除了一些不常用的 api 比如 不再支持 keycode 作为 v-on 的修饰符 推荐使用按键名")]),t._v(" "),a("li",[t._v("2.$on，$off 和 $once 实例方法被移除 vue2 常用于$on $emit 创建全局事件监听器 实现 eventBus 来实现数据共享")]),t._v(" "),a("li",[t._v("3.删除过滤器 filter 可以使用计算属性代替")]),t._v(" "),a("li",[t._v("4.移除内联特性 内联模板 Attribute")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" inline"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("template属性可以将其内部内容用作模板，而不是将其作为分发内容 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("my"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("component inline"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("它们被编译为组件自己的模板"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("不是父级所包含的内容。"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("my"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("component"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("ul",[a("li",[t._v("5.$children 已移除 $children 实例 property 已从 Vue 3.0 中移除，不再支持.在vue3中，如果要访问子组件实例，建议使用$refs")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("my"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("button"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Change logo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("my"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("button"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mounted")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [VueComponent]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("引入 tree-shaking 可以将无用模块“剪辑”，仅打包需要的，使打包的整体体积变小了")]),t._v(" "),a("li",[t._v("没有被使用的 API 的相关代码可以在最终打包时被移除")]),t._v(" "),a("li",[t._v("原理")]),t._v(" "),a("li",[t._v("1 作为模块顶层的语句 import 模块的依赖关系时确定的。可以进行静态分析。")]),t._v(" "),a("li",[t._v("2 分析程序流，判断哪些变量未被啥用、引用，进而删除此代码。")])])]),t._v(" "),a("li",[a("p",[t._v("更快")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("// old arr")])]),t._v(" "),a("li",[a("p",[t._v('["a", "b", "c", "d", "e", "f", "g", "h"]')])]),t._v(" "),a("li",[a("p",[t._v("// new arr")])]),t._v(" "),a("li",[a("p",[t._v('["a", "b", "d", "f", "c", "e", "x", "y", "g", "h"]')])]),t._v(" "),a("li",[a("p",[t._v("双端对比 比较结束后 相同的复用 不相同的乱序在进一步处理")])]),t._v(" "),a("li",[a("p",[t._v("对于相同节点 要去判断 key type")])]),t._v(" "),a("li",[a("p",[t._v("第一步 左边按需查找,如果节点不能复用 则停止")])]),t._v(" "),a("li",[a("p",[t._v("第二步 右边按需查找，如果节点不能复用 则停止")])]),t._v(" "),a("li",[a("p",[t._v("第三步 老节点没有了 新节点还有 就要去做新增 mountElement()")])]),t._v(" "),a("li",[a("p",[t._v("第四步 新节点没有 老节点还有 就要去做删除 unmount（）")])]),t._v(" "),a("li",[a("p",[t._v("old[c,d,e,f] new[d,f,c,e,x,y]")])]),t._v(" "),a("li",[a("p",[t._v("第五步 新老节点都还有 是一中乱序的")])]),t._v(" "),a("li",[a("p",[t._v("通过 Map 保存新元素的未匹配的元素 为什么用 Map 因为可以更快速的通过 key value 的形势查找")])]),t._v(" "),a("li",[a("p",[t._v("const keyToNewIndexMap = new Map()")])]),t._v(" "),a("li",[a("p",[t._v("通过游标循环 找到需要保存 map 结构的元素 key=节点的 key value = index")])]),t._v(" "),a("li",[a("p",[t._v("{d:2,f:3,c:4,e:5,x:6,y:7}")])]),t._v(" "),a("li",[a("p",[t._v("遍历老元素进行查找 获取更新节点的总个数 达到就不去在便利 直接删除老节点还存在 未遍历的 newarr - 执行到第五步的 i = 新节点的总个数")])]),t._v(" "),a("li",[a("p",[t._v("通过老元素的 key 去 keyToNewIndexMap 中去查找是否会命中，")])]),t._v(" "),a("li",[a("p",[t._v("没有的话 就会 unmount 删除")])]),t._v(" "),a("li",[a("p",[t._v("此刻会生成数组 newIndexToOldIndexMap 数组个数是计算出来新节点的总个数的长度 初始值为 0")])]),t._v(" "),a("li",[a("p",[t._v("复用的节点生成标记 newIndexToOldIndexMap 的下标保存老元素的下标")])]),t._v(" "),a("li",[a("p",[t._v("有的话 复用节点 patch()")])]),t._v(" "),a("li",[a("p",[t._v("1diff 算法优化")])]),t._v(" "),a("li",[a("p",[t._v("静态节点的优化")])]),t._v(" "),a("li",[a("p",[t._v("render 函数主要用来生成虚拟 dom")])]),t._v(" "),a("li",[a("p",[t._v("vue3 标记了标记了 dynamicChildren 动态节点")])]),t._v(" "),a("li",[a("p",[t._v("在 path 阶段，只会比较动态节点，静态节点直接略过，而 vue2 中 还会进入 patch 判定为静态节点直接 return。vue3 静态节点不会进入 patch。")])]),t._v(" "),a("li",[a("p",[t._v("vue3 diff 采用双端对比")]),t._v(" "),a("ul",[a("li",[t._v("// old arr")]),t._v(" "),a("li",[t._v('["a", "b", "c", "d", "e", "f", "g", "h"]')]),t._v(" "),a("li",[t._v("// new arr")]),t._v(" "),a("li",[t._v('["a", "b", "d", "f", "c", "e", "x", "y", "g", "h"]')]),t._v(" "),a("li",[t._v("第一步 从头到尾的比对开始 比对方式 a b 是相同的节点（sameVnode）进入 path 到 [c] 停止")]),t._v(" "),a("li",[t._v("第二步 从尾到头的比对开始 比对 h g 到 [f] 停止;")]),t._v(" "),a("li",[t._v("第三步 旧数据比对完毕的时候 新数据多余的表明时新增 进入 mount")]),t._v(" "),a("li",[t._v("第四步 新数据比对完毕 旧数据还存在的 表示时多余的 进入 unmount")]),t._v(" "),a("li",[t._v("第五步 进入到这里 说明有乱序")]),t._v(" "),a("li",[t._v("根据没有比较的数据 新建一个 Map keyToNewIndexMap[d:2,f:3,c:4,e:5,x:6,y:7]")]),t._v(" "),a("li",[t._v("循环旧的剩余数据 找到未比较的数据索引 newIndexToOldIndexMap[4(d),6(f),3(c),5(e),0,0] 同时进行补 0")]),t._v(" "),a("li",[t._v("如果旧数据能在新数据里找到 和之前的 patch")]),t._v(" "),a("li",[t._v("没找到 说明时删除 unmount 掉")]),t._v(" "),a("li",[t._v("其实到这一步，已经很好办了，从尾到头循环一下 newIndexToOldIndexMap")]),t._v(" "),a("li",[t._v("是 0 的，说明是新增的数据，就 mount 进去")]),t._v(" "),a("li",[t._v("非 0 的，说明在旧数据里，我们只要把它们移动到对应 index 的前面就行了")])])]),t._v(" "),a("li",[a("p",[t._v("vue2 diff 采用双指针循环对比")]),t._v(" "),a("ul",[a("li",[t._v("// old arr")]),t._v(" "),a("li",[t._v('["a", "b", "c", "d", "e", "f", "g", "h"]')]),t._v(" "),a("li",[t._v("// new arr")]),t._v(" "),a("li",[t._v('["a", "b", "d", "f", "c", "e", "x", "y", "g", "h"]')]),t._v(" "),a("li",[t._v("vue2 整体上也差不多，但是它只有一个双指针的循环")]),t._v(" "),a("li",[t._v("首先比较新旧的头，直到第一个非 sameVNOde")]),t._v(" "),a("li",[t._v("然后从尾开始比较，直到第一个非 sameVNOde")]),t._v(" "),a("li",[t._v("然后会做头尾，尾头的比较，这种是考虑到会左移和右移操作")]),t._v(" "),a("li",[t._v('["d", "f", "c", "e", "x", "y"] 未比较的')]),t._v(" "),a("li",[t._v('接着会尝试从 "d" 开始去旧数据里找到 index 然后移动到旧数据还未比较数据的头部')]),t._v(" "),a("li",[t._v("把 d 移动到 c 之前")]),t._v(" "),a("li",[t._v("把 f 移动到 c 之前")]),t._v(" "),a("li",[t._v("下轮循环发现新旧都是 c 于是 patch 完之后继续")]),t._v(" "),a("li",[t._v("下轮循环发现新旧都是 e 于是 patch 完之后继续")]),t._v(" "),a("li",[t._v("发现 x 不在旧数据中，createElm(x)")]),t._v(" "),a("li",[t._v("发现 x 不在旧数据中，createElm(y)")]),t._v(" "),a("li",[t._v("可以发现，vue2 在 diff 算法处理无序数据的判断是在最后")]),t._v(" "),a("li",[t._v("每次处理之前，会依次判断之前所有的 if")]),t._v(" "),a("li",[t._v("而 vue3 中，会找到所有需要移动的节点，直接移动")]),t._v(" "),a("li",[t._v("还有一点 vue3 中 对于首尾替换的额外判断似乎也取消了")])])]),t._v(" "),a("li",[a("p",[t._v("事件优化")])]),t._v(" "),a("li",[a("p",[t._v("如果开启了 cacheHandlers 则会缓存我们的事件，事件的变化不会引起重新渲染")])]),t._v(" "),a("li",[a("p",[t._v("vue2 中看到其实每次更新，render 函数跑完之后 vnode 绑定的事件都是一个全新生成的 function，就算它们内部的代码是一样的所以 events 的 update 钩子，几乎每次都能命中，然后更新一下函数的引用")])])])])]),t._v(" "),a("h2",{attrs:{id:"reactive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reactive"}},[t._v("#")]),t._v(" reactive")]),t._v(" "),a("ul",[a("li",[t._v("reactive 的局限性\n"),a("ul",[a("li",[t._v("1.仅对对象类型的有效，string number boolean 这样的原始类型无效")]),t._v(" "),a("li",[t._v("2.因为响应系统是通过属性访问进行追踪的，因此必须保持该响应式对象的相同引用。")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reactive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// n 是一个局部变量，同 state.count")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 失去响应性连接")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不影响原始的 state")]),t._v("\nn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// count 也和 state.count 失去了响应性连接")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不会影响原始的 state")]),t._v("\ncount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该函数接收一个普通数字，并且")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将无法跟踪 state.count 的变化")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callSomeFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"ref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ref"}},[t._v("#")]),t._v(" ref")]),t._v(" "),a("ul",[a("li",[t._v("reactive 的限制是因为 javascript 没有作用于值类型的引用机制，为此 Vue 提供了 ref 方法可以使用任何值类型的响应式。")]),t._v(" "),a("li",[t._v("ref 将传入的参数的值包装为一个带 .value 属性的 ref 对象")]),t._v(" "),a("li",[t._v("和响应式对象的属性类似，ref 的 .value 属性也是响应式的。同时，当值为对象类型时，会用 reactive() 自动转换它的 .value。")]),t._v(" "),a("li",[t._v("ref() 让我们能创造一种对任意值的 “引用”，并能够在不丢失响应性的前提下传递这些引用。这个功能很重要")]),t._v(" "),a("li",[t._v("ref 被传递给函数或是从一般对象上被解构时，不会丢失响应性：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该函数接收一个 ref")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要通过 .value 取值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但它会保持响应性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callSomeFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 仍然是响应式的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"ref-解包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ref-解包"}},[t._v("#")]),t._v(" ref 解包")]),t._v(" "),a("ul",[a("li",[t._v("当 ref 在模板中作为顶层属性被访问时，它们会被自动“解包”，所以不需要使用 .value。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script setup"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ref "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("increment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button @click"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"increment"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" 无需 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("ul",[a("li",[t._v("请注意，仅当 ref 是模板渲染上下文的顶层属性时才适用自动“解包”。 例如， foo 是顶层属性，但 object.foo 不是。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" object "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("下面的表达式将不会像预期的那样工作：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("我们可以通过将 foo 改成顶层属性来解决这个问题：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"reactive-解构的数据无法支持响应式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reactive-解构的数据无法支持响应式"}},[t._v("#")]),t._v(" reactive 解构的数据无法支持响应式")]),t._v(" "),a("ul",[a("li",[t._v("reactive 无法劫持基本类型的数据。 对于基本类型的数据，函数传递或者对象结构时，会丢失数据的引用。")]),t._v(" "),a("li",[t._v("结构相当于 直接绕过代理 直接进行取值 声明新的变量。")]),t._v(" "),a("li",[t._v("ref 的基本类型的数据 只能通过创建一个对象，将数据保存到 value 中。去劫持 value 的 get 和 set。")]),t._v(" "),a("li",[t._v("toRefs 遍历对象 讲属性转成 Ref 的数据 这样结构出来的还是 Ref 数据。就会保持了响应式。")])]),t._v(" "),a("h2",{attrs:{id:"v-show-v-if"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-show-v-if"}},[t._v("#")]),t._v(" v-show v-if")]),t._v(" "),a("ul",[a("li",[t._v("v-show 不支持在 template> 元素上使用，也不能和 v-else 搭配使用。")]),t._v(" "),a("li",[t._v("v-if 可以在 template 元素上使用")]),t._v(" "),a("li",[t._v("v-if 是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。")])]),t._v(" "),a("h2",{attrs:{id:"v-for-v-if"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-for-v-if"}},[t._v("#")]),t._v(" v-for v-if")]),t._v(" "),a("ul",[a("li",[t._v("当 v-if 和 v-for 同时存在于一个元素上的时候，v-if 会首先被执行")])]),t._v(" "),a("h2",{attrs:{id:"watch-vs-watcheffect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#watch-vs-watcheffect"}},[t._v("#")]),t._v(" watch vs. watchEffect")]),t._v(" "),a("ul",[a("li",[t._v("watch 和 watchEffect 的主要功能是相同的，都能响应式地执行回调函数。它们的区别是追踪响应式依赖的方式不同：")]),t._v(" "),a("li",[t._v("watch 只追踪明确定义的数据源，不会追踪在回调中访问到的东西；默认情况下，只有在数据源发生改变时才会触发回调；watch 可以访问侦听数据的新值和旧值。")]),t._v(" "),a("li",[t._v("watchEffect 会初始化执行一次，在副作用发生期间追踪依赖，自动分析出侦听数据源；")]),t._v(" "),a("li",[t._v("watchEffect 无法访问侦听数据的新值和旧值。")]),t._v(" "),a("li",[t._v("watchEffect 第三个参数配置对象\n"),a("ul",[a("li",[t._v("flush: 'post' 默认组件渲染前执行 设置延迟到组件渲染之后执行 watchPostEffect() 使用 flush: 'post' 选项时的别名。")]),t._v(" "),a("li",[t._v("flush: 'sync'")])])])]),t._v(" "),a("h2",{attrs:{id:"ref-访问调用子组件的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ref-访问调用子组件的方法"}},[t._v("#")]),t._v(" ref 访问调用子组件的方法")]),t._v(" "),a("ul",[a("li",[t._v("子组件需要暴露对应的方法和数据 父组件才可以调用")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineExpose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ruleFormRef"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  submitForm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"vue3-移除了-on-off-可以使用-mitt-库来代替"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue3-移除了-on-off-可以使用-mitt-库来代替"}},[t._v("#")]),t._v(" vue3 移除了$on $off 可以使用 mitt 库来代替")]),t._v(" "),a("h2",{attrs:{id:"vue3-deep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue3-deep"}},[t._v("#")]),t._v(" vue3 /deep/")]),t._v(" "),a("ul",[a("li",[t._v("v3 废弃了 /deep/ ::v-deep 的写法")]),t._v(" "),a("li",[t._v("使用 :deep(.class){}")])]),t._v(" "),a("h2",{attrs:{id:"常见状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见状态码"}},[t._v("#")]),t._v(" 常见状态码")]),t._v(" "),a("ul",[a("li",[t._v("1 系列表示信息响应")]),t._v(" "),a("li",[t._v("2 系列表示成功响应")]),t._v(" "),a("li",[t._v("3 系列表示重定向响应")]),t._v(" "),a("li",[t._v("4 系列表示客户端错误")]),t._v(" "),a("li",[t._v("5 系列表示服务端错误")]),t._v(" "),a("li",[t._v("200 服务器成功返回用户请求的数据")]),t._v(" "),a("li",[t._v("201 新建或者修改数据成功")]),t._v(" "),a("li",[t._v("204 用户删除数据成功")]),t._v(" "),a("li",[t._v("401 用户没有权限")]),t._v(" "),a("li",[t._v("403 用户得到授权")]),t._v(" "),a("li",[t._v("404 用户发出请求 访问了不存在的记录 服务器没有进行操作")])])])}),[],!1,null,null,null);a.default=n.exports}}]);